AWSTemplateFormatVersion: '2010-09-09'

Parameters:
    APIName:
        Type: String

Resources:
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # DB
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    MyTable:
        Type: AWS::DynamoDB::Table
        Properties:
            TableName: appsync-example
            AttributeDefinitions:
                - AttributeName: id
                  AttributeType: S
            KeySchema:
                - AttributeName: id
                  KeyType: HASH
            BillingMode: PAY_PER_REQUEST

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # Appsync General
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    AppSyncAPI:
        Type: AWS::AppSync::GraphQLApi
        Properties:
            Name: !Ref APIName
            AuthenticationType: API_KEY

    AppSyncSchema:
        Type: AWS::AppSync::GraphQLSchema
        Properties:
            ApiId: !GetAtt AppSyncAPI.ApiId
            Definition: >
                type Note {
                    id: String!
                    title: String!
                    content: String!
                }

                type Query {
                    notes: [Note!]!
                    note(id: ID!): Note
                }

                type Mutation {
                    create(title: String!, content: String!): Note!
                    update(id: ID!, title: String!, content: String!): Note!
                    remove(id: ID!): Note!
                    signUp(email: String!): String!
                }

    AppSyncAPIKey:
        Type: AWS::AppSync::ApiKey
        Properties:
            ApiId: !GetAtt AppSyncAPI.ApiId
            Expires: 1627859769

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # Appsync Datasources
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    AppSyncDataSourceDynamoDB:
        Type: AWS::AppSync::DataSource
        Properties:
            ApiId: !GetAtt AppSyncAPI.ApiId
            Name: dynamodb
            Type: AMAZON_DYNAMODB
            ServiceRoleArn: !GetAtt RoleAppSyncDynamoDB.Arn
            DynamoDBConfig:
                TableName: !Ref MyTable
                AwsRegion: !Sub ${AWS::Region}

    AppSyncDataSourceEventsLambda:
        Type: AWS::AppSync::DataSource
        Properties:
            ApiId: !GetAtt AppSyncAPI.ApiId
            Name: eventsLambda
            Type: AWS_LAMBDA
            ServiceRoleArn: !GetAtt RoleAppSyncEventLambda.Arn
            LambdaConfig:
                LambdaFunctionArn: !ImportValue AppSyncTestedResolverEventFunction

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # Appsync Datasource Permissions
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    RoleAppSyncDynamoDB:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ${APIName}-dynamodb-policy
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Action:
                          - sts:AssumeRole
                      Principal:
                          Service:
                              - appsync.amazonaws.com
            Policies:
                - PolicyName: PolicyDynamoDB
                  PolicyDocument:
                      Version: '2012-10-17'
                      Statement:
                          - Effect: Allow
                            Action:
                                - dynamodb:*
                            Resource:
                                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${MyTable}

    RoleAppSyncEventLambda:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ${APIName}-eventLambda-policy
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Action:
                          - sts:AssumeRole
                      Principal:
                          Service:
                              - appsync.amazonaws.com
            Policies:
                - PolicyName: CodeBuildParameterStore
                  PolicyDocument:
                      Version: '2012-10-17'
                      Statement:
                          - Effect: Allow
                            Action:
                                - lambda:*
                            Resource:
                                - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:*

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # Appsync Resolvers
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ResolverGet:
        Type: AWS::AppSync::Resolver
        DependsOn: AppSyncSchema
        Properties:
            ApiId: !GetAtt AppSyncAPI.ApiId
            TypeName: Query
            FieldName: note
            DataSourceName: !GetAtt AppSyncDataSourceDynamoDB.Name
            RequestMappingTemplate: >
                {
                  "version": "2017-02-28",
                  "operation": "GetItem",
                  "key": {
                    "id": { "S": "${context.arguments.id}" }
                  },
                  "consistentRead": true
                }
            ResponseMappingTemplate: $util.toJson($context.result)

    ResolverList:
        Type: AWS::AppSync::Resolver
        DependsOn: AppSyncSchema
        Properties:
            ApiId: !GetAtt AppSyncAPI.ApiId
            TypeName: Query
            FieldName: notes
            DataSourceName: !GetAtt AppSyncDataSourceDynamoDB.Name
            RequestMappingTemplate: >
                {
                  "version": "2017-02-28",
                  "operation": "Scan",
                  "limit" : 60
                }
            ResponseMappingTemplate: $util.toJson($context.result.items)

    ResolverCreate:
        Type: AWS::AppSync::Resolver
        DependsOn: AppSyncSchema
        Properties:
            ApiId: !GetAtt AppSyncAPI.ApiId
            TypeName: Mutation
            FieldName: create
            DataSourceName: !GetAtt AppSyncDataSourceDynamoDB.Name
            RequestMappingTemplate: >
                {
                  "version": "2017-02-28",
                  "operation": "PutItem",
                  "key": {
                    "id": $util.dynamodb.toDynamoDBJson($util.autoId())
                  },
                  "attributeValues" : $util.dynamodb.toMapValuesJson($context.arguments)
                }
            ResponseMappingTemplate: $util.toJson($context.result)

    ResolverUpdate:
        Type: AWS::AppSync::Resolver
        DependsOn: AppSyncSchema
        Properties:
            ApiId: !GetAtt AppSyncAPI.ApiId
            TypeName: Mutation
            FieldName: update
            DataSourceName: !GetAtt AppSyncDataSourceDynamoDB.Name
            RequestMappingTemplate: >
                {
                  "version": "2017-02-28",
                  "operation": "PutItem",
                  "key": {
                    "id": $util.dynamodb.toDynamoDBJson($context.arguments.id)
                  },
                  "attributeValues" : $util.dynamodb.toMapValuesJson($context.arguments)        
                }
            ResponseMappingTemplate: $util.toJson($context.result)

    ResolverDelete:
        Type: AWS::AppSync::Resolver
        DependsOn: AppSyncSchema
        Properties:
            ApiId: !GetAtt AppSyncAPI.ApiId
            TypeName: Mutation
            FieldName: remove
            DataSourceName: !GetAtt AppSyncDataSourceDynamoDB.Name
            RequestMappingTemplate: >
                {
                  "version": "2017-02-28",
                  "operation": "DeleteItem",
                  "key" : {
                    "id" : $util.dynamodb.toDynamoDBJson($ctx.args.id)
                  }
                }
            ResponseMappingTemplate: $util.toJson($context.result)

    # Resolver Event Pipeline
    # https://dev.to/joshuaakahn/building-aws-appsync-pipeline-resolvers-with-aws-cloudformation-1fjg
    ListPostsQueryResolver:
        Type: AWS::AppSync::Resolver
        Properties:
            ApiId: !GetAtt AppSyncAPI.ApiId
            TypeName: Mutation
            FieldName: signUp
            Kind: PIPELINE
            PipelineConfig:
                Functions:
                    - !GetAtt WriteStatePipelineFunction.FunctionId
                    - !GetAtt EmitEventPipelineFunction.FunctionId
            RequestMappingTemplate: |
                $util.qr($ctx.stash.put("id", "id_1234"))  
                $util.qr($ctx.stash.put("event", "signup")) 
                {}
            ResponseMappingTemplate: |
                $util.toJson($ctx.result)

    WriteStatePipelineFunction:
        Type: AWS::AppSync::FunctionConfiguration
        Properties:
            ApiId: !GetAtt AppSyncAPI.ApiId
            FunctionVersion: '2018-05-29'
            Name: WriteStatePipelineFunction
            DataSourceName: !GetAtt AppSyncDataSourceDynamoDB.Name
            RequestMappingTemplate: >
                {
                  "version": "2017-02-28",
                  "operation": "PutItem",
                  "key": {
                      "id": $util.dynamodb.toDynamoDBJson($cxt.stash.id),
                      "event": $util.dynamodb.toDynamoDBJson($ctx.stash.event),
                      "state": $util.dynamodb.toDynamoDBJson("processing")
                  },
                  "attributeValues" : $util.dynamodb.toMapValuesJson($context.arguments)
                }
            ResponseMappingTemplate: $util.toJson($context.result)
    EmitEventPipelineFunction:
        Type: AWS::AppSync::FunctionConfiguration
        Properties:
            ApiId: !GetAtt AppSyncAPI.ApiId
            FunctionVersion: '2018-05-29'
            Name: EmitEventPipelineFunction
            DataSourceName: !GetAtt AppSyncDataSourceEventsLambda.Name
            RequestMappingTemplate: >
                {
                    "version": "2018-05-29",
                    "operation": "Invoke",
                    "payload": {
                        "source": "custom.AppsyncTested",
                        "event": $util.toJson($ctx.stash.event),
                        "data": {
                            "id": $util.toJson($ctx.stash.id)
                        }
                    }
                }
            ResponseMappingTemplate: $util.toJson($context.result)

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # Signup Complete
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    SignupCompleteEventRule:
        Type: AWS::Events::Rule
        Properties:
            Description: Listen on the custom event bus for Signup events
            EventBusName: !ImportValue AppSyncTestedEventBusName
            EventPattern:
                source:
                    - custom.AppsyncTested
                detail-type:
                    - signup-completed
            Targets:
                - Arn: !Ref SignupCompleteWorkflow
                  Id: SignupCompleteWorkflow
                  RoleArn: !GetAtt InvokeWorkflowRole.Arn

    SignupCompleteWorkflow:
        Type: AWS::StepFunctions::StateMachine
        Properties:
            StateMachineName: ApiSignupCompleteWorkflow
            RoleArn: !GetAtt SignupCompletedRole.Arn
            DefinitionString: >
                {
                  "Comment": "Handles User Signup Completed Workflow",
                  "StartAt": "Update Create User State",
                  "States": {
                      "Update Create User State": {
                          "Type": "Task",
                          "Resource": "arn:aws:states:::dynamodb:putItem",
                            "Parameters": {
                                "TableName": "appsync-example",
                                "Item": {
                                        "id": {"S.$": "$.detail.id"},
                                        "email": {"S": "example"},
                                        "status": {"S": "complete"}
                                       
                                }
                          },
                          "ResultPath": "$.DynamoDB",
                          "End": true
                      }
                  }
                }

    InvokeWorkflowRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - events.amazonaws.com
                      Action: sts:AssumeRole
            Policies:
                - PolicyName: InvokeCustomerWorkflowsPolicy
                  PolicyDocument:
                      Version: '2012-10-17'
                      Statement:
                          - Effect: Allow
                            Action:
                                - states:StartExecution
                            Resource:
                                - !Ref SignupCompleteWorkflow

    SignupCompletedRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - !Sub states.${AWS::Region}.amazonaws.com
                      Action: sts:AssumeRole
            Policies:
                - PolicyName: PublishEventsPolicy
                  PolicyDocument:
                      Version: '2012-10-17'
                      Statement:
                          - Effect: Allow
                            Action:
                                - dynamodb:*
                            Resource:
                                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${MyTable}

Outputs:
    APIKey:
        Description: API Key
        Value: !GetAtt AppSyncAPIKey.ApiKey

    GraphQL:
        Description: GraphQL URL
        Value: !GetAtt AppSyncAPI.GraphQLUrl
