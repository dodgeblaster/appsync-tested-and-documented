AWSTemplateFormatVersion: '2010-09-09'

Parameters:
    APIName:
        Type: String

Resources:
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # DB
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    MyTable:
        Type: AWS::DynamoDB::Table
        Properties:
            TableName: appsync-example
            AttributeDefinitions:
                - AttributeName: id
                  AttributeType: S
            KeySchema:
                - AttributeName: id
                  KeyType: HASH
            BillingMode: PAY_PER_REQUEST

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # Appsync
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    AppSyncAPI:
        Type: AWS::AppSync::GraphQLApi
        Properties:
            Name: !Ref APIName
            AuthenticationType: API_KEY

    AppSyncSchema:
        Type: AWS::AppSync::GraphQLSchema
        Properties:
            ApiId: !GetAtt AppSyncAPI.ApiId
            Definition: >
                type Note {
                    id: String!
                    title: String!
                    content: String!
                }

                type Query {
                    notes: [Note!]!
                    note(id: ID!): Note
                }

                type Mutation {
                    create(title: String!, content: String!): Note!
                    update(id: ID!, title: String!, content: String!): Note!
                    remove(id: ID!): Note!
                    addUser(email: String!): String!
                }

    AppSyncAPIKey:
        Type: AWS::AppSync::ApiKey
        Properties:
            ApiId: !GetAtt AppSyncAPI.ApiId
            Expires: 1627859769

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # Appsync Datasources
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    AppSyncDataSourceDynamoDB:
        Type: AWS::AppSync::DataSource
        Properties:
            ApiId: !GetAtt AppSyncAPI.ApiId
            Name: dynamodb
            Type: AMAZON_DYNAMODB
            ServiceRoleArn: !GetAtt RoleAppSyncDynamoDB.Arn
            DynamoDBConfig:
                TableName: !Ref MyTable
                AwsRegion: !Sub ${AWS::Region}

    AppSyncDataSourceEventsLambda:
        Type: AWS::AppSync::DataSource
        Properties:
            ApiId: !GetAtt AppSyncAPI.ApiId
            Name: eventsLambda
            Type: AWS_LAMBDA
            ServiceRoleArn: !GetAtt RoleAppSyncEventLambda.Arn
            LambdaConfig:
                LambdaFunctionArn: !GetAtt ExampleFunction.Arn

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # Appsync Datasource Permissions
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    RoleAppSyncDynamoDB:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ${APIName}-dynamodb-policy
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Action:
                          - sts:AssumeRole
                      Principal:
                          Service:
                              - appsync.amazonaws.com
            Policies:
                - PolicyName: PolicyDynamoDB
                  PolicyDocument:
                      Version: '2012-10-17'
                      Statement:
                          - Effect: Allow
                            Action:
                                - dynamodb:*
                            Resource:
                                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${MyTable}

    RoleAppSyncEventLambda:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ${APIName}-eventLambda-policy
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Action:
                          - sts:AssumeRole
                      Principal:
                          Service:
                              - appsync.amazonaws.com
            Policies:
                - PolicyName: CodeBuildParameterStore
                  PolicyDocument:
                      Version: '2012-10-17'
                      Statement:
                          - Effect: Allow
                            Action:
                                - lambda:*
                            Resource:
                                - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:*

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # Appsync Resolvers
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ResolverGet:
        Type: AWS::AppSync::Resolver
        DependsOn: AppSyncSchema
        Properties:
            ApiId: !GetAtt AppSyncAPI.ApiId
            TypeName: Query
            FieldName: note
            DataSourceName: !GetAtt AppSyncDataSourceDynamoDB.Name
            RequestMappingTemplate: >
                {
                  "version": "2017-02-28",
                  "operation": "GetItem",
                  "key": {
                    "id": { "S": "${context.arguments.id}" }
                  },
                  "consistentRead": true
                }
            ResponseMappingTemplate: $util.toJson($context.result)

    ResolverList:
        Type: AWS::AppSync::Resolver
        DependsOn: AppSyncSchema
        Properties:
            ApiId: !GetAtt AppSyncAPI.ApiId
            TypeName: Query
            FieldName: notes
            DataSourceName: !GetAtt AppSyncDataSourceDynamoDB.Name
            RequestMappingTemplate: >
                {
                  "version": "2017-02-28",
                  "operation": "Scan",
                  "limit" : 60
                }
            ResponseMappingTemplate: $util.toJson($context.result.items)

    ResolverCreate:
        Type: AWS::AppSync::Resolver
        DependsOn: AppSyncSchema
        Properties:
            ApiId: !GetAtt AppSyncAPI.ApiId
            TypeName: Mutation
            FieldName: create
            DataSourceName: !GetAtt AppSyncDataSourceDynamoDB.Name
            RequestMappingTemplate: >
                {
                  "version": "2017-02-28",
                  "operation": "PutItem",
                  "key": {
                    "id": $util.dynamodb.toDynamoDBJson($util.autoId())
                  },
                  "attributeValues" : $util.dynamodb.toMapValuesJson($context.arguments)
                }
            ResponseMappingTemplate: $util.toJson($context.result)

    ResolverUpdate:
        Type: AWS::AppSync::Resolver
        DependsOn: AppSyncSchema
        Properties:
            ApiId: !GetAtt AppSyncAPI.ApiId
            TypeName: Mutation
            FieldName: update
            DataSourceName: !GetAtt AppSyncDataSourceDynamoDB.Name
            RequestMappingTemplate: >
                {
                  "version": "2017-02-28",
                  "operation": "PutItem",
                  "key": {
                    "id": $util.dynamodb.toDynamoDBJson($context.arguments.id)
                  },
                  "attributeValues" : $util.dynamodb.toMapValuesJson($context.arguments)        
                }
            ResponseMappingTemplate: $util.toJson($context.result)

    ResolverDelete:
        Type: AWS::AppSync::Resolver
        DependsOn: AppSyncSchema
        Properties:
            ApiId: !GetAtt AppSyncAPI.ApiId
            TypeName: Mutation
            FieldName: remove
            DataSourceName: !GetAtt AppSyncDataSourceDynamoDB.Name
            RequestMappingTemplate: >
                {
                  "version": "2017-02-28",
                  "operation": "DeleteItem",
                  "key" : {
                    "id" : $util.dynamodb.toDynamoDBJson($ctx.args.id)
                  }
                }
            ResponseMappingTemplate: $util.toJson($context.result)

    ResolverAddUser:
        Type: AWS::AppSync::Resolver
        DependsOn: AppSyncSchema
        Properties:
            ApiId: !GetAtt AppSyncAPI.ApiId
            TypeName: Mutation
            FieldName: addUser
            DataSourceName: !GetAtt AppSyncDataSourceEventsLambda.Name
            RequestMappingTemplate: >
                {
                    "version": "2018-05-29",
                    "operation": "Invoke",
                    "payload": {
                        "field": "addUser",
                        "arguments": {
                            "email": $util.toJson($context.arguments.email)
                        }
                    }
                }
            ResponseMappingTemplate: $util.toJson($context.result)

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # Lambda Function
    # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    ExampleFunction:
        Type: AWS::Lambda::Function
        Properties:
            Runtime: nodejs12.x
            Role: !GetAtt LambdaRole.Arn
            Handler: index.handler
            Code:
                ZipFile: !Sub
                    - |
                        const aws = require('aws-sdk')
                        const eventbridge = new aws.EventBridge()
                        exports.handler = async (event) => {
                            const params = {
                                Entries: [
                                    {
                                        EventBusName: '${EventBus}',
                                        Source: 'custom.notesAppsync',
                                        DetailType: 'addUserRequested',
                                        Time: new Date(),
                                        Detail: JSON.stringify(event.arguments)
                                    }
                                ]
                            }
                            await eventbridge.putEvents(params).promise()
                            return "Success"
                        }
                    - EventBus: EventBridgeExample
            Description: Example Inline Function.
            TracingConfig:
                Mode: Active

    LambdaRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ${APIName}-lambda-policy
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Action:
                          - sts:AssumeRole
                      Principal:
                          Service:
                              - lambda.amazonaws.com
            Policies:
                - PolicyName: !Sub ${APIName}-Dynamo-lambdapolicy
                  PolicyDocument:
                      Version: '2012-10-17'
                      Statement:
                          - Effect: Allow
                            Action:
                                - dynamodb:*
                            Resource:
                                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${MyTable}
                - PolicyName: !Sub ${APIName}-Events-lambdapolicy
                  PolicyDocument:
                      Version: '2012-10-17'
                      Statement:
                          - Effect: Allow
                            Action:
                                - events:*
                            Resource:
                                - !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/*

Outputs:
    APIKey:
        Description: API Key
        Value: !GetAtt AppSyncAPIKey.ApiKey

    GraphQL:
        Description: GraphQL URL
        Value: !GetAtt AppSyncAPI.GraphQLUrl
